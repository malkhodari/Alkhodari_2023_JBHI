function [net_transformer,predictedLabels_transformer,scores_transformer] = train_transformer_net(train_signals,Y_train,test_signals,Y_test,weights)

NumFeatures = size(train_signals{1,1},1);
NumSignals = size(train_signals{1,1},1);
[lgraph] = transformer_network_bigger(NumSignals,Y_train,weights);

miniBatchSize = 32;
options = trainingOptions("adam", ...
    ExecutionEnvironment="gpu", ...
    MiniBatchSize=miniBatchSize, ...
    MaxEpochs=20, ...
    SequencePaddingDirection="right", ...
    ValidationData={test_signals,Y_test}, ...
    ValidationFrequency=10, ...
    InitialLearnRate=0.001, ... 
    LearnRateSchedule="piecewise", ...
    LearnRateDropFactor=0.1, ...
    LearnRateDropPeriod=50, ... 
    L2Regularization=0.0001, ...
    Shuffle='every-epoch', ...
    Plots="training-progress", ...
    Verbose=0);

rng('default')
clear net_transformer
[net_transformer,info] = trainNetwork(train_signals,Y_train,lgraph,options);

[predictedLabels_transformer,scores_transformer] = classify(net_transformer,test_signals,'MiniBatchSize',miniBatchSize);

end